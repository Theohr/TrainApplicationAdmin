@model WebApp.Models.STATION

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_ResPagesLayout.cshtml";
}
<style>
    /*where the css part of the page is */
    a { /*all the labels will have the following styling */
        color: black;
        background-color: transparent;
        text-decoration: none;
    }


        a:hover { /* styling when they are hovered*/
            color: red;
            background-color: transparent;
            text-decoration: underline;
        }

        a:active { /* styling when they weren't clicked before */
            color: yellow;
            background-color: transparent;
            text-decoration: underline;
        }
</style>
<body>
    <!--The title of the page with a user icon-->
    <h2><i class="fas fa-edit"></i> Edit Station</h2>

    <!--Creating a form with the user details-->
    @using (Html.BeginForm())
    {
        <!--the AntiForgeryToken for security-->
        @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" }) <!--summarize error messages in a specific place-->
        @Html.HiddenFor(model => model.STATIONID) <!-- Station ID is unique so it can't be changed-->

        <div class="form-group">
            @Html.LabelFor(model => model.STATIONNAME, htmlAttributes: new { @class = "control-label col-md-2" }) <!--The station name label-->
            <div class="col-md-10">
                @Html.EditorFor(model => model.STATIONNAME, new { htmlAttributes = new { @class = "form-control" } }) <!--The value of station name-->
                @Html.ValidationMessageFor(model => model.STATIONNAME, "", new { @class = "text-danger" }) <!--Displaying an error in the context if exists-->
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PLATFORMS, htmlAttributes: new { @class = "control-label col-md-2" }) <!--The  platforms label-->
            <div class="col-md-10">
                @Html.EditorFor(model => model.PLATFORMS, new { htmlAttributes = new { @class = "form-control" } }) <!--The value of platforms-->
                @Html.ValidationMessageFor(model => model.PLATFORMS, "", new { @class = "text-danger" }) <!--Displaying an error in the context if exists-->
            </div>
        </div>

        <!--Container with the Save and Back to list button-->
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" /> <!--Save button-->
            </div>
            <div style="
                  text-align:center;
                  background-color:#DCDCDC;
                  padding: 10px;
                  float:left;
                  margin-left: 10px;
                  margin-top: 10px;
                  margin:10px;
                  height:auto;
                  width: auto;
                  border-radius: 0.2em; overflow: hidden;
                  position: relative;
                  box-shadow: 0px 1.5px 5px rgba(0,0,0,0.35)">
                <i class="fas fa-arrow-left"></i> @Html.ActionLink("Back to List", "Index") <!--Button to go back to list-->
            </div>
        </div>
    </div>
    }
</body>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
